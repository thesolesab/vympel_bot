import errorHandle from "../../utils/errorHandle.js";
import { getButtonFrom, getInlineKeyboard, getPlayersButtons, implementButtons } from '../../utils/keyboards.js';
import { signCommands } from './helpers.js';

const { back } = getButtonFrom(signCommands)


export const signInAction = async (ctx) => {
    try {
        const { gameDay, user } = ctx.session

        await gameDay.signIn(user._user)

        await ctx.answerCbQuery()
        await ctx.editMessageText(
            `–¢—ã –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –∏–≥—Ä—É –≤ <code><b>${gameDay.day}</b></code>\n\n–ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ª–µ–≥–∏–æ–Ω–µ—Ä–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ –µ–≥–æ –∏–º—è`,
            {
                parse_mode: 'HTML',
                ...getInlineKeyboard([back])
            }
        )
    } catch (e) {
        errorHandle(ctx, e)
    }
}

export const signOutAction = async (ctx) => {
    try {
        const { gameDay, user } = ctx.session

        gameDay.signOut(user._user)
        await ctx.answerCbQuery()
        await ctx.editMessageText(
            `–ìo—Ç–æ–≤–æ!üòû\n–¢—ã –±–æ–ª—å—à–µ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ`,
            {
                parse_mode: 'HTML',
                ...getInlineKeyboard([back])
            }
        )
    } catch (e) {
        errorHandle(ctx, e)
    }
}


export const addLegionerAction = async (ctx) => {
    try {
        let { gameDay, user } = ctx.session
        const allPlayers = await gameDay.getAllPlayers()

        if (allPlayers.length < 15) {
            const leg = {
                name: ctx.message.text,
                whoAdd: user._user
            }

            await gameDay.addLegioner(leg)

            await ctx.replyWithHTML(`–¢–≤–æ–π —á–µ–ª–æ–≤–µ–∫ - <code><b>${leg.name}</b></code>, –∑–∞–ø–∏—Å–∞–Ω\n${++allPlayers.length} –≤—Å–µ–≥–æ.`, getInlineKeyboard([back]))
        } else {
            await ctx.replyWithHTML(`‚õîÔ∏è –£–ø—Å, —É–∂–µ –Ω–∞–±—Ä–∞–Ω–Ω–æ –º–∞–∫—Å–∏–º—É–º —á–µ–ª–æ–≤–µ–∫`, getInlineKeyboard([back]))
        }

    } catch (e) {
        errorHandle(ctx, e)
    }
}



export const deletePlayersFromDb = async (ctx) => {
    const { gameDay } = ctx.session
    const { player } = ctx
    let text = `–í—ã–±–µ—Ä–∏ –∫–æ–≥–æ —É–¥–∞–ª–∏–º –∏–∑ —Å–æ—Å—Ç–∞–≤–∞`

    if (player) {
        text = `${player.name} - —É–¥–∞–ª–µ–Ω, –∫—Ç–æ —Ç–æ –µ—â–µ?`
        if (ctx.player.whoAdd) {
            await gameDay.removeLegioner(player)
        } else {
            await gameDay.signOut(player)
        }
    }

    const buttons = getInlineKeyboard(getPlayersButtons(gameDay.getAllPlayers()))
    implementButtons(buttons, back)

    await ctx.editMessageText(
        text,
        {
            ...buttons
        }
    )
}